diff --git a/bin/Makefile b/bin/Makefile
index 2215fdb..c7c22aa 100644
--- a/bin/Makefile
+++ b/bin/Makefile
@@ -3,6 +3,6 @@
 
 SUBDIR=	cat chmod cp date df echo ed expr hostname \
 	kill ksh ln ls mkdir mv pax pwd rm rmdir sh \
-	sleep stty sync test
+	sleep stty sync test barrier_test
 
 .include <bsd.subdir.mk>
diff --git a/bin/barrier_test/Makefile b/bin/barrier_test/Makefile
new file mode 100644
index 0000000..2779cdb
--- /dev/null
+++ b/bin/barrier_test/Makefile
@@ -0,0 +1,8 @@
+#	$NetBSD: Makefile,v 1.8 1997/07/20 22:37:41 christos Exp $
+#	@(#)Makefile	8.1 (Berkeley) 5/31/93
+
+PROG=	barrier_test
+
+LDADD+=	-lmthread
+
+.include <bsd.prog.mk>
diff --git a/bin/barrier_test/barrier_test.1 b/bin/barrier_test/barrier_test.1
new file mode 100644
index 0000000..e69de29
diff --git a/bin/barrier_test/barrier_test.c b/bin/barrier_test/barrier_test.c
new file mode 100644
index 0000000..df4144b
--- /dev/null
+++ b/bin/barrier_test/barrier_test.c
@@ -0,0 +1,81 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <minix/mthread.h>
+
+mthread_barrier_t b;
+
+void *function(void *id);
+
+void *function(void *id)
+{
+  int r;
+  sleep(1 * (int) id);
+
+  printf("Hi, I'm thread %d\n", (int) id);
+
+  r = mthread_barrier_sync(&b);
+  if (r != 0) {
+    printf("Barrier (%d) sync failed: %d\n", (int) id, r);
+  }
+
+  printf("Finished (%d)\n", (int) id);
+
+  return NULL;
+}
+
+int main()
+{
+  int r;
+  mthread_thread_t t1, t2, t3;
+
+  r = mthread_barrier_init(&b, 4); // 3 threads + 1 main thread
+  if (r != 0) {
+    printf("Barrier init failed: %d\n", r);
+  }
+
+  printf("Hi, I'm main thread 0\n");
+
+  // Thread creation
+  r = mthread_create(&t1, NULL, &function, (void *) 1);
+  if (r != 0) {
+    printf("Thread 1 creation failed: %d\n", r);
+  }
+
+  r = mthread_create(&t2, NULL, &function, (void *) 2);
+  if (r != 0) {
+    printf("Thread 2 creation failed: %d\n", r);
+  }
+
+  r = mthread_create(&t3, NULL, &function, (void *) 3);
+  if (r != 0) {
+   printf("Thread 3 creation failed: %d\n", r);
+  }
+
+  r = mthread_barrier_sync(&b);
+  if (r != 0) {
+    printf("Barrier (0) sync failed: %d\n", r);
+  }
+
+  // Thread joining
+  r = mthread_join(t1, NULL);
+  if (r != 0) {
+    printf("Thread 1 join failed: %d\n", r);
+  }
+
+  r = mthread_join(t2, NULL);
+  if (r != 0) {
+    printf("Thread 2 join failed: %d\n", r);
+  }
+
+  r = mthread_join(t3, NULL);
+  if (r != 0) {
+   printf("Thread 3 join failed: %d\n", r);
+  }
+
+  printf("Finished main thread (0)\n");
+
+  r = mthread_barrier_destroy(&b);
+  if (r != 0) {
+    printf("Barrier destroy failed: %d\n", r);
+  }
+}
diff --git a/games/Makefile b/games/Makefile
index ca51c29..d6fa757 100644
--- a/games/Makefile
+++ b/games/Makefile
@@ -14,11 +14,12 @@ SUBDIR=	adventure arithmetic \
 	monop morse number \
 	pig ppt primes \
 	random tetris \
-	wargames
+	wargames \
+	conway
 
 .if !defined(__MINIX)
 .if ${MKCXX} != "no"
-SUBDIR+=	dab 
+SUBDIR+=	dab
 .endif
 .endif # !defined(__MINIX)
 
diff --git a/games/conway/Makefile b/games/conway/Makefile
new file mode 100644
index 0000000..26e4bb7
--- /dev/null
+++ b/games/conway/Makefile
@@ -0,0 +1,11 @@
+#	$NetBSD: Makefile,v 1.11 2012/04/04 10:59:44 joerg Exp $
+#	@(#)Makefile	8.1 (Berkeley) 5/31/93
+
+PROG=	conway
+SRCS=	game.c conway.c
+LDADD+= -lmthread
+DPADD+= ${LIBMTHREAD}
+
+CWARNFLAGS.clang+=	-Wno-string-plus-int
+
+.include <bsd.prog.mk>
diff --git a/games/conway/conway.1 b/games/conway/conway.1
new file mode 100644
index 0000000..e69de29
diff --git a/games/conway/conway.c b/games/conway/conway.c
new file mode 100644
index 0000000..86cf5ab
--- /dev/null
+++ b/games/conway/conway.c
@@ -0,0 +1,370 @@
+#include <stdio.h>
+#include <minix/mthread.h>
+#include <stdlib.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+#include "conway.h"
+#include "global.h"
+#include "proto.h"
+
+//Copies core matrix to aux matrix (step increment)
+void update_board(){
+  int i,j;
+
+  for (i = 0 ; i < game.config.height ; i++){
+    for (j = 0 ; j < game.config.width ; j++){
+      game.board.aux_matrix[i][j] = game.board.core_matrix[i][j];
+    }
+  }
+
+  if (game.config.debug)
+    printf("[GAME] Board updated (core -> aux)\n");
+}
+
+//Divides board into blocks
+int gen_blocks(int max_h, int max_w){
+  if (game.config.debug)
+  printf("[BLOCK GENERATOR] Starting block generator..\n");
+
+  //Memory allocation for blocks
+  game.board.blocks = malloc(game.config.height*game.config.width * sizeof(struct block_data*));
+  //Error handling
+  if (game.board.blocks == NULL) {
+    printf("ERROR: Not enough memory\n");
+    return (errno);
+  }
+
+  int i,j;
+  int aux_h, aux_w;
+  int aux_index;
+
+  i = 0;
+  aux_index = 0;
+
+  //Go through columns and generate blocks by growing rows size up
+  while (i < game.config.height) {
+    //Check if there's enough space for a complete max block (columns)
+    if (game.config.height - i > max_h) aux_h = max_h;
+    else aux_h = game.config.height - i;
+
+    j = 0;
+    while (j < game.config.width) {
+      //Check if there's enough space for a complete max block (rows)
+      if (game.config.width - j > max_w) aux_w = max_w;
+      else aux_w = game.config.width - j;
+
+      //Assign new block info (size and position)
+      game.board.blocks[aux_index].height = aux_h;
+      game.board.blocks[aux_index].width = aux_w;
+      game.board.blocks[aux_index].pos_i = i;
+      game.board.blocks[aux_index].pos_j = j;
+
+      if (game.config.debug)
+      printf("[BLOCK GENERATOR] Created a %dx%d block at (%d,%d)\n", game.board.blocks[aux_index].height, game.board.blocks[aux_index].width, game.board.blocks[aux_index].pos_i, game.board.blocks[aux_index].pos_j);
+
+      aux_index++;
+      j += aux_w;
+    }
+    i += aux_h;
+  }
+
+  //Total blocks initialization
+  game.board.total_blocks = aux_index;
+  if (game.config.debug)
+  printf("[BLOCK GENERATOR] Finished with %d blocks created\n", aux_index);
+
+  //Reset block index for worker threads to use it.
+  game.block_index = 0;
+
+  return (0);
+}
+
+int init_board(){
+  //Allocate space for both core and aux matrices
+  game.board.core_matrix = (int **)malloc(game.config.height * sizeof(int*));
+  game.board.aux_matrix = (int **)malloc(game.config.height * sizeof(int*));
+
+  //Error handling
+  if (game.board.core_matrix == NULL || game.board.core_matrix == NULL) {
+    printf("ERROR: Not enough memory\n");
+    return (errno);
+  }
+
+  int i,j;
+
+  for (i = 0 ; i < game.config.height ; i++){
+    //Rows allocation
+    game.board.core_matrix[i] = (int *)malloc(game.config.width * sizeof(int));
+    game.board.aux_matrix[i] = (int *)malloc(game.config.width * sizeof(int));
+
+    //Error handling
+    if (game.board.core_matrix[i] == NULL || game.board.core_matrix[i] == NULL) {
+      printf("ERROR: Not enough memory\n");
+      return (errno);
+    }
+  }
+
+  if (game.config.debug) {
+    printf("[INIT] Core matrix created\n");
+    printf("[INIT] Aux matrix created\n");
+  }
+
+
+  //Core matrix initialization (0)
+  for (i = 0 ; i < game.config.height ; i++){
+    for (j = 0 ; j < game.config.width ; j++){
+      game.board.core_matrix[i][j] = 0;
+    }
+  }
+
+  return (0);
+}
+
+//Major initializations
+int init_game(char *config_file){
+  if (game.config.debug)
+  printf("[INIT] Opening config file\n");
+
+  //Open config file
+  FILE* file = fopen(config_file, "r");
+  //Error handling
+  if (file == NULL) {
+    printf("ERROR: Config file not found.\n");
+    return (errno);
+  }
+
+  int err;
+  char line[16];
+  int read_step = 0;
+
+  //Read line until its result is NULL
+  while (fgets(line, sizeof(line), file)) {
+    read_step++;
+
+    //Boardize line
+    if (read_step == 1){
+      //Split by spaces and assign values
+      char *token = strtok(line, " ");
+      game.config.height = atoi(token);
+      token = strtok(NULL, " ");
+      game.config.width = atoi(token);
+
+      //Error handling
+      if (game.config.height <= 0 || game.config.width <= 0) {
+        printf("ERROR: Invalid config format (invalid size)\n");
+        return (EINVAL);
+      }
+
+      if (game.config.debug)
+      printf("[INIT] Board size: %dx%d\n", game.config.height, game.config.width);
+    }
+    //Max block size line
+
+    else if (read_step == 2){
+      //Split by spaces and assign values
+      char *token = strtok(line, " ");
+      game.config.block_h = atoi(token);
+      token = strtok(NULL, " ");
+      game.config.block_w = atoi(token);
+
+      //Error handling
+      if (game.config.block_w <= 0 || game.config.block_w <= 0 || game.config.block_w > game.config.height || game.config.block_w > game.config.width) {
+        printf("ERROR: Invalid config format (invalid block size)\n");
+        return (EINVAL);
+      }
+
+      if (game.config.debug)
+      printf("[INIT] Max block size: %dx%d\n", game.config.block_h, game.config.block_w);
+    }
+    //Threads number line
+    else if (read_step == 3){
+      game.config.threads = atoi(line);
+      //Error handling
+      if (game.config.threads <= 0) {
+        printf("ERROR: Invalid config format (threads should be at least 1)\n");
+        return (EINVAL);
+      }
+
+      //Now that we have all the config data assigned, initialize board.
+      err = init_board();
+      if (err) return err;
+
+      if (game.config.debug)
+      printf("[INIT] Working threads: %d\n", game.config.threads);
+    }
+    //Extra lines (starting alive cells)
+    else {
+      //Split by spaces and assign positions
+      int alive_i, alive_j;
+      char *token = strtok(line, " ");
+      alive_i = atoi(token);
+      token = strtok(NULL, " ");
+      alive_j = atoi(token);
+
+      //Error handling
+      if (alive_i < 0 || alive_i > game.config.height - 1 || alive_j < 0 || alive_j > game.config.width - 1) {
+        printf("ERROR: Invalid config format (invalid cell position)\n");
+        return (EINVAL);
+      }
+
+      game.board.core_matrix[alive_i][alive_j] = 1;
+      if (game.config.debug)
+      printf("[INIT] Alive cell at (%d,%d)\n", alive_i, alive_j);
+    }
+  }
+
+  //Close stream
+  fclose(file);
+
+  //Generate blocks
+  err = gen_blocks(game.config.block_h, game.config.block_w);
+  if (err) return err;
+
+  //Barrier initialization
+  err = mthread_barrier_init(&game.barrier, game.config.threads);
+  //Error Handling
+  if (err) {
+    printf("ERROR: Barrier couldn't be initialized\n");
+    return (err);
+  }
+
+  //Mute initialization
+  err = mthread_mutex_init(&game.mutex, NULL);
+  //Error handling
+  if (err) {
+    printf("ERROR: Mutex couldn't be initialized\n");
+    return (err);
+  }
+
+  //First board update
+  update_board();
+
+  if (game.config.debug)
+  printf("[INIT] Game successfully initialized\n");
+
+  return 0;
+}
+
+//Prints core matrix
+void print_board(){
+  int i,j;
+
+  for (i = 0 ; i < game.config.height ; i++){
+    for (j = 0 ; j < game.config.width ; j++){
+      if (game.config.grill) {
+        if (game.board.core_matrix[i][j]) printf("[*]");
+        else printf("[ ]");
+      }
+      else {
+        if (game.board.core_matrix[i][j]) printf(" * ");
+        else printf("   ");
+      }
+    }
+    printf("\n");
+  }
+}
+
+//Next step status for a single cell based on Conway's rules
+int calc_life(int i, int j){
+  int living_neighbors = 0;
+
+  //Check for valid positions and check neighbors' status
+  if (i < game.config.height - 1 && game.board.aux_matrix[i+1][j]) living_neighbors++;
+  if (i > 0 && game.board.aux_matrix[i-1][j]) living_neighbors++;
+  if (j < game.config.width - 1 && game.board.aux_matrix[i][j+1]) living_neighbors++;
+  if (j > 0 && game.board.aux_matrix[i][j-1]) living_neighbors++;
+  if (i < game.config.height - 1 && j < game.config.width - 1 && game.board.aux_matrix[i+1][j+1]) living_neighbors++;
+  if (i < game.config.height - 1 && j > 0 && game.board.aux_matrix[i+1][j-1]) living_neighbors++;
+  if (i > 0 && j < game.config.width - 1 && game.board.aux_matrix[i-1][j+1]) living_neighbors++;
+  if (i > 0 && j > 0 && game.board.aux_matrix[i-1][j-1]) living_neighbors++;
+
+  //Evaluate next step status
+  if (game.board.aux_matrix[i][j]){
+    if (living_neighbors < 2) return 0;
+    else if (living_neighbors > 3) return 0;
+    else return 1;
+  }
+  else{
+    if (living_neighbors == 3) return 1;
+    else return 0;
+  }
+}
+
+//Worker threads' loop
+void *do_conway(void *thread_id){
+  int i,j,b;
+
+  //Run until game is done
+  while (!game.done){
+    //We need this to be race-condition free
+    mthread_mutex_lock(&game.mutex);
+    //Check if step is done (all blocks have been calculated)
+    if (game.block_index >= game.board.total_blocks){
+      //Reset block index
+      game.block_index = 0;
+      //Update aux matrix
+      update_board();
+      //Print board
+      if (game.config.print){
+        system("clear");
+        print_board();
+      }
+      //Watchable delay
+      usleep(game.config.delay);
+    }
+    mthread_mutex_unlock(&game.mutex);
+
+    if (game.done) break;
+
+    while(1){
+      mthread_mutex_lock(&game.mutex);
+      //Block to be evaluated
+      b = game.block_index;
+      game.block_index++;
+      mthread_mutex_unlock(&game.mutex);
+
+      if (b >= game.board.total_blocks){
+        break;
+      }
+
+      //Do conway calculation for current block's cells.
+      for (i = game.board.blocks[b].pos_i ; i < game.board.blocks[b].pos_i + game.board.blocks[b].height ; i++){
+        for (j = game.board.blocks[b].pos_j ; j < game.board.blocks[b].pos_j + game.board.blocks[b].width ; j++){
+          game.board.core_matrix[i][j] = calc_life(i,j);
+          if (game.config.debug)
+            printf("[GAME][Thread %d] Cell at (%d,%d) will have status %d on next step\n", (*(int *) thread_id), i, j, game.board.core_matrix[i][j]);
+        }
+      }
+      //Minix won't automatically stop threads (god knows why)
+      mthread_yield();
+    }
+    if (game.done) break;
+
+    //Wait for next step
+    mthread_barrier_sync(&game.barrier);
+  }
+  return NULL;
+}
+
+//Release previous dynamicly allocated memory
+void freeMemory(){
+  free(game.board.core_matrix);
+  free(game.board.aux_matrix);
+  free(game.board.blocks);
+}
+
+//Listen for keystroke NOTE: Not working in MINIX due to unknown reason. (won't stop threads)
+//Based on Lucas' solution for avoiding pressing enter with getchar.
+//http://stackoverflow.com/questions/1798511/how-to-avoid-press-enter-with-any-getchar
+void *keyStroke_catcher(){
+  static struct termios oldt, newt;
+  tcgetattr( STDIN_FILENO, &oldt);
+  newt = oldt;
+  newt.c_lflag &= ~(ICANON);
+  tcsetattr( STDIN_FILENO, TCSANOW, &newt);
+  getchar();
+  tcsetattr( STDIN_FILENO, TCSANOW, &oldt);
+  game.done = 1;
+  return NULL;
+}
diff --git a/games/conway/conway.h b/games/conway/conway.h
new file mode 100644
index 0000000..cc2be8c
--- /dev/null
+++ b/games/conway/conway.h
@@ -0,0 +1,43 @@
+#ifndef _CONWAY_H_
+#define _CONWAY_H_
+
+//Single block struct
+struct block_data {
+  int height;
+  int width;
+  int pos_i;
+  int pos_j;
+};
+
+//Board
+struct board_data {
+  int **core_matrix;
+  int **aux_matrix;
+  struct block_data *blocks;
+  int total_blocks;
+};
+
+//Game configuration
+struct config_data {
+  int height;
+  int width;
+  int block_h;
+  int block_w;
+  int threads;
+  int delay;
+  int debug;
+  int print;
+  int grill;
+};
+
+//Global system struct
+struct game_sys {
+  mthread_mutex_t mutex;
+  mthread_barrier_t barrier;
+  struct board_data board;
+  struct config_data config;
+  int block_index;
+  int done;
+};
+
+#endif /* !_CONWAY_H_ */
diff --git a/games/conway/game.c b/games/conway/game.c
new file mode 100644
index 0000000..9f3b249
--- /dev/null
+++ b/games/conway/game.c
@@ -0,0 +1,54 @@
+#include <stdio.h>
+#include <minix/mthread.h>
+#include <stdlib.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+#include "conway.h"
+#include "global.h"
+#include "proto.h"
+
+int main(int argc, char *argv[]){
+
+  //*********** OPTIONS (1 = enabled | 2 = disabled) ******************
+  game.config.print = 1; //Print matrix on every step
+  game.config.debug = 0; //Show debug messages
+  game.config.grill = 0; //Show grill
+  game.config.delay = 50000; //Delay between steps (microseconds)
+  //*******************************************************************
+
+  int err;
+
+  if (argc > 1) {
+    //Init game
+    err = init_game(argv[1]);
+  }
+  //Error handling
+  else {
+    printf("ERROR: Config path not provided. Use (./conway <path>)\n");
+    err = EINVAL;
+  }
+
+  if (!err) {
+    //Threads array (based on config) plus one (keystroke listener)
+    mthread_thread_t threads[game.config.threads + 1];
+    int thread_index;
+
+    //Start threads' loops
+    for (thread_index = 0 ; thread_index < game.config.threads; thread_index++){
+      mthread_create(&threads[thread_index], NULL, &do_conway, (void *)thread_index);
+    }
+
+    //Keystroke listener thread (won't work on minix)
+    //mthread_create(&threads[game.config.threads], NULL, &keyStroke_catcher, NULL);
+
+    //Wait for all threads to finish.
+    for (thread_index = 0 ; thread_index < game.config.threads + 1; thread_index++){
+      mthread_join(threads[thread_index], NULL);
+    }
+  }
+
+  //Free dynamic memory
+  freeMemory();
+  return err;
+}
diff --git a/games/conway/global.h b/games/conway/global.h
new file mode 100644
index 0000000..70dc260
--- /dev/null
+++ b/games/conway/global.h
@@ -0,0 +1,6 @@
+#ifndef _CONWAY_GLOBAL_H_
+#define _CONWAY_GLOBAL_H_
+
+struct game_sys game;
+
+#endif /* !_CONWAY_GLOBAL_H_ */
diff --git a/games/conway/proto.h b/games/conway/proto.h
new file mode 100644
index 0000000..29d9cba
--- /dev/null
+++ b/games/conway/proto.h
@@ -0,0 +1,14 @@
+#ifndef _CONWAY_PROTO_H_
+#define _CONWAY_PROTO_H_
+
+int init_game(char *config_file);
+void update_board(void);
+int init_board(void);
+void print_board(void);
+int gen_blocks(int max_h, int max_w);
+int calc_life(int i, int j);
+void freeMemory(void);
+void *keyStroke_catcher(void);
+void *do_conway(void *thread_id);
+
+#endif /* !_CONWAY_PROTO_H_ */
diff --git a/minix/include/minix/mthread.h b/minix/include/minix/mthread.h
index bb4ba56..baae035 100644
--- a/minix/include/minix/mthread.h
+++ b/minix/include/minix/mthread.h
@@ -50,7 +50,7 @@ struct __mthread_attr {
   int ma_detachstate;
   struct __mthread_attr *ma_prev;
   struct __mthread_attr *ma_next;
-}; 
+};
 typedef struct __mthread_attr *mthread_attr_t;
 
 typedef struct {
@@ -63,7 +63,16 @@ typedef struct {
   mthread_thread_t writer;
   mthread_mutex_t queue;
   mthread_event_t drain;
-} mthread_rwlock_t; 
+} mthread_rwlock_t;
+
+struct __mthread_barrier {
+  unsigned int count;
+  unsigned int total;
+  struct __mthread_mutex *m;
+  struct __mthread_cond *c;
+  unsigned int mm_magic;
+};
+typedef struct __mthread_barrier *mthread_barrier_t;
 
 #define MTHREAD_CREATE_JOINABLE 001
 #define MTHREAD_CREATE_DETACHED 002
@@ -141,6 +150,11 @@ int mthread_rwlock_unlock(mthread_rwlock_t *rwlock);
 /* schedule.c */
 int mthread_yield(void);
 void mthread_yield_all(void);
+
+/* barrier.c */
+int mthread_barrier_init(mthread_barrier_t *barrier, unsigned int total);
+int mthread_barrier_destroy(mthread_barrier_t *barrier);
+int mthread_barrier_sync(mthread_barrier_t *barrier);
 __END_DECLS
 
 #if defined(_MTHREADIFY_PTHREADS)
@@ -154,6 +168,7 @@ typedef mthread_mutexattr_t pthread_mutexattr_t;
 typedef mthread_attr_t pthread_attr_t;
 typedef mthread_event_t pthread_event_t;
 typedef mthread_rwlock_t pthread_rwlock_t;
+typedef mthread_barrier_t pthread_barrier_t;
 
 /* LSC: No equivalent, so void* for now. */
 typedef void *pthread_rwlockattr_t;
@@ -227,6 +242,11 @@ int pthread_yield(void);
 int sched_yield(void);
 void pthread_yield_all(void);
 
+/* barrier.c */
+int pthread_barrier_init(pthread_barrier_t *barrier, unsigned int total);
+int pthread_barrier_destroy(pthread_barrier_t *barrier);
+int pthread_barrier_sync(pthread_barrier_t *barrier);
+
 /* LSC: FIXME: Maybe we should really do something with those... */
 #define pthread_mutexattr_init(u) (0)
 #define pthread_mutexattr_destroy(u) (0)
diff --git a/minix/lib/libmthread/Makefile b/minix/lib/libmthread/Makefile
index 909782c..35acd60 100644
--- a/minix/lib/libmthread/Makefile
+++ b/minix/lib/libmthread/Makefile
@@ -14,6 +14,7 @@ SRCS=	\
 	queue.c \
 	rwlock.c \
 	scheduler.c \
+	barrier.c \
 
 WARNS?=	4
 
diff --git a/minix/lib/libmthread/barrier.c b/minix/lib/libmthread/barrier.c
new file mode 100644
index 0000000..bd8a74b
--- /dev/null
+++ b/minix/lib/libmthread/barrier.c
@@ -0,0 +1,167 @@
+#include <minix/mthread.h>
+#include "global.h"
+#include "proto.h"
+
+#ifdef MTHREAD_STRICT
+int mthread_barrier_valid(mthread_barrier_t *barrier);
+#else
+# define mthread_barrier_valid(x) ((*x)->mm_magic == MTHREAD_INIT_MAGIC)
+#endif
+
+/*===========================================================================*
+*				mthread_barrier_init		                                             *
+*===========================================================================*/
+int mthread_barrier_init(barrier, total)
+mthread_barrier_t *barrier;	/* barrier that is to be initialized */
+unsigned int total; /* num of threads the barrier should wait for */
+{
+  int r;
+  struct __mthread_barrier *b;
+
+  if (barrier == NULL)
+    return(EINVAL);
+#ifdef MTHREAD_STRICT
+  else if (!mthread_barrier_valid(barrier))
+    return(EBUSY);
+#endif
+  else if ((b = malloc(sizeof(struct __mthread_barrier))) == NULL)
+  	return(ENOMEM);
+
+  r = mthread_mutex_init(&b->m, NULL);
+  if (r != 0) {
+    free(b);
+    return r;
+  }
+
+  r = mthread_cond_init(&b->c, NULL);
+  if (r != 0) {
+    mthread_mutex_destroy(&b->m);
+    free(b);
+    return r;
+  }
+
+  b->total = total;
+  b->count = 0;
+  b->mm_magic = MTHREAD_INIT_MAGIC;
+
+  *barrier = (mthread_barrier_t) b;
+
+  return(0);
+}
+
+/*===========================================================================*
+*				mthread_barrier_destroy		                                           *
+*===========================================================================*/
+int mthread_barrier_destroy(barrier)
+mthread_barrier_t *barrier;	/* barrier that is to be destroyed */
+{
+  int r = 0;
+  struct __mthread_barrier *b;
+
+  if (barrier == NULL || !mthread_barrier_valid(barrier))
+    return(EINVAL);
+  else if (mthread_barrier_busy(barrier))
+    return(EBUSY);
+
+  b = (struct __mthread_barrier *) *barrier;
+
+  r = mthread_cond_destroy(&b->c);
+  if (r != 0)
+    return r;
+
+  r = mthread_mutex_destroy(&b->m);
+  if (r != 0)
+    return r;
+
+  b->mm_magic = MTHREAD_NOT_INUSE;
+  free(*barrier);
+  *barrier = NULL;
+
+  return (0);
+}
+
+/*===========================================================================*
+*				mthread_barrier_sync  		                                           *
+*===========================================================================*/
+int mthread_barrier_sync(barrier)
+mthread_barrier_t *barrier;	/* barrier that is to be waited */
+{
+  int r;
+  struct __mthread_barrier *b;
+
+  if (barrier == NULL || !mthread_barrier_valid(barrier))
+    return(EINVAL);
+
+  b = (struct __mthread_barrier *) *barrier;
+
+  r = mthread_mutex_lock(&b->m);
+  if (r != 0)
+    return r;
+
+  b->count++;
+
+  if (b->count == b->total) {
+    b->count = 0;
+
+    r = mthread_cond_broadcast(&b->c);
+    if (r != 0)
+      return r;
+  } else {
+    r = mthread_cond_wait(&b->c, &b->m);
+    if (r != 0)
+      return r;
+  }
+
+  r = mthread_mutex_unlock(&b->m);
+  if (r != 0)
+    return r;
+
+  return(0);
+}
+
+/*===========================================================================*
+*				mthread_barrier_busy  		                                           *
+*===========================================================================*/
+int mthread_barrier_busy(barrier)
+mthread_barrier_t *barrier;	/* barrier that is to be waited */
+{
+  int r, result;
+  struct __mthread_barrier *b;
+
+  b = (struct __mthread_barrier *) *barrier;
+
+  r = mthread_mutex_lock(&b->m);
+  if (r != 0)
+    return r;
+
+  result = b->count > 0;
+
+  r = mthread_mutex_unlock(&b->m);
+  if (r != 0)
+    return r;
+
+  return result;
+}
+
+/*===========================================================================*
+*				mthread_barrier_valid  		                                           *
+*===========================================================================*/
+#ifdef MTHREAD_STRICT
+int mthread_barrier_valid(barrier)
+mthread_barrier_t *barrier;	/* barrier that is to be waited */
+{
+  struct __mthread_barrier *b;
+
+  b = (struct __mthread_barrier *) *barrier;
+
+  if (!mthread_cond_valid(&b->c) || !mthread_mutex_valid(&b->m))
+    return(EINVAL);
+
+  return(0);
+}
+#endif
+
+/* pthread compatibility layer. */
+__weak_alias(pthread_barrier_destroy, mthread_barrier_destroy)
+__weak_alias(pthread_barrier_init, mthread_barrier_init)
+__weak_alias(pthread_barrier_sync, mthread_barrier_sync)
diff --git a/minix/lib/libmthread/condition.c b/minix/lib/libmthread/condition.c
index 3488a5f..8e6918c 100644
--- a/minix/lib/libmthread/condition.c
+++ b/minix/lib/libmthread/condition.c
@@ -6,11 +6,9 @@
 static struct __mthread_cond *vc_front, *vc_rear;
 static void mthread_cond_add(mthread_cond_t *c);
 static void mthread_cond_remove(mthread_cond_t *c);
-static int mthread_cond_valid(mthread_cond_t *c);
 #else
 # define mthread_cond_add(c)		((*c)->mc_magic = MTHREAD_INIT_MAGIC)
 # define mthread_cond_remove(c)		((*c)->mc_magic = MTHREAD_NOT_INUSE)
-# define mthread_cond_valid(c)		((*c)->mc_magic == MTHREAD_INIT_MAGIC)
 #endif
 #define MAIN_COND mainthread.m_cond
 
diff --git a/minix/lib/libmthread/proto.h b/minix/lib/libmthread/proto.h
index 7e80219..5c806db 100644
--- a/minix/lib/libmthread/proto.h
+++ b/minix/lib/libmthread/proto.h
@@ -17,6 +17,12 @@ void mthread_init_valid_conditions(void);
 int mthread_cond_verify(void);
 #endif
 
+#ifdef MTHREAD_STRICT
+static int mthread_cond_valid(mthread_cond_t *c);
+#else
+# define mthread_cond_valid(c) ((*c)->mc_magic == MTHREAD_INIT_MAGIC)
+#endif
+
 /* key.c */
 void mthread_init_keys(void);
 void mthread_cleanup_values(void);
@@ -62,4 +68,7 @@ void mthread_queue_add(mthread_queue_t *queue, mthread_thread_t thread);
 mthread_thread_t mthread_queue_remove(mthread_queue_t *queue);
 int mthread_queue_isempty(mthread_queue_t *queue);
 
+/* barrier.c */
+int mthread_barrier_busy(mthread_barrier_t *barrier);
+
 #endif
