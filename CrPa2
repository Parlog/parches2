diff -x '.*' -ruNP CrPa/README.md CrPa2/README.md
--- CrPa/README.md	2016-03-25 19:33:33.000000000 -0300
+++ CrPa2/README.md	1969-12-31 21:00:00.000000000 -0300
@@ -1,2 +0,0 @@
-Este archivo pretende resumir y mostrar las nociones basicas para el uso del programa.
-
diff -x '.*' -ruNP CrPa/games/Makefile CrPa2/games/Makefile
--- CrPa/games/Makefile	2016-03-25 19:10:09.000000000 -0300
+++ CrPa2/games/Makefile	2016-05-15 22:28:48.000000000 -0300
@@ -14,7 +14,8 @@
 	monop morse number \
 	pig ppt primes \
 	rain random rogue snake tetris \
-	wargames
+	wargames \
+	conway
 
 .if !defined(__MINIX)
 .if ${MKCXX} != "no"
diff -x '.*' -ruNP CrPa/games/conway/Makefile CrPa2/games/conway/Makefile
--- CrPa/games/conway/Makefile	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/Makefile	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,11 @@
+#	$NetBSD: Makefile,v 1.30 2008/02/24 02:43:18 dholland Exp $
+#	@(#)Makefile	8.1 (Berkeley) 5/31/93
+
+.include <bsd.own.mk>
+
+PROG=	conway
+SRCS=	conway.c entrada.c
+MAN=	conway.6
+HIDEGAME=hidegame
+
+.include <bsd.prog.mk>
diff -x '.*' -ruNP CrPa/games/conway/config CrPa2/games/conway/config
--- CrPa/games/conway/config	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/config	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,52 @@
+51 51
+5 5
+3
+25 5
+25 6
+25 7
+25 8
+25 9
+25 10
+25 11
+25 12
+25 13
+25 14
+25 15
+25 16
+25 17
+25 18
+25 19
+25 20
+25 21
+25 22
+25 23
+25 24
+25 25
+25 26
+25 27
+25 28
+25 29
+25 30
+25 31
+25 32
+25 33
+25 34
+25 35
+25 36
+25 37
+25 38
+25 39
+25 40
+25 41
+25 42
+25 43
+25 44
+25 45
+
+
+
+
+
+
+
+
diff -x '.*' -ruNP CrPa/games/conway/conway.c CrPa2/games/conway/conway.c
--- CrPa/games/conway/conway.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/conway.c	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,280 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <termios.h>
+#include <signal.h>
+#include "entrada.h"
+ // Juego basado en  Juego de la vida  de :AlmaVagabunda
+ // Juego basado en  Conway_ Game_of_Life  de :rosettacode.org
+
+#define for_x for (int x = 0; x < w; x++) // ciclo para x
+#define for_y for (int y = 0; y < h; y++) // ciclo para y
+#define for_xy for_x for_y
+int h,w,th,tw;
+struct submatrices{
+    int Initf, Initc, Finf , Finc;
+};
+void init_submatrices(struct submatrices* A){
+        A->Initf = 0;
+        A->Initc = 0;
+        A->Finc = 0;
+        A->Finf = 0;
+    }
+
+int getch(void)
+{
+    struct termios oldattr, newattr;
+    int ch;
+    tcgetattr( STDIN_FILENO, &oldattr );
+    newattr = oldattr;
+    newattr.c_lflag &= ~( ICANON | ECHO );
+    tcsetattr( STDIN_FILENO, TCSANOW, &newattr );
+    ch = getchar();
+    tcsetattr( STDIN_FILENO, TCSANOW, &oldattr );
+    return ch;
+}
+
+
+void show(void *u)
+{
+    int (*univ)[w] = u;
+    for_y {
+        for_x { 
+                if(univ[y][x]){
+                printf("\033[7;31m :( "); // It's Dead
+            }
+            else{
+                printf("\033[7;32m :) "); // It's alive
+            }
+        }
+        printf("\n");
+    }
+    printf("\n");
+    printf("\033[0m ");
+    printf("\033[2K");
+}
+int NNeighbour(void *u,int i,int j){
+unsigned (*univ)[w] = u;
+int vecino = 0;
+            if(i>0 && j>0 && univ[i-1][j-1]==1){ // diagonal izq arriba
+                vecino++;
+            }
+            if(i>0 && univ[i-1][j]==1){ // arriba
+                vecino++;
+            }
+            if(i>0 && j<w &&univ[i-1][j+1]==1){ //diagonal derecha superior 
+                vecino++;
+            }
+            if(j>0 &&univ[i][j-1]==1){ // izquierda*
+                vecino++;
+            }
+            if(j<w && univ[i][j+1]==1){ // derecha
+                vecino++;
+            }
+            if(i<h && j>0 &&univ[i+1][j-1]==1){ // diagonal izqueda inferior*
+                vecino++;
+            }
+            if(i<h &&univ[i+1][j]==1){ // abajo*
+                vecino++;
+            }
+            if(i<h && j<w && univ[i+1][j+1]==1){ // diagonal derecha inferior
+                vecino++;
+            }
+            return vecino;
+}
+void setSubmatrices(void *s)
+{ // x = j = h = th || y = i = w = tw 
+struct submatrices (*sub) = s;
+int matriz[h][w];
+for_y{
+    for_x{
+     matriz[y][x] = 0;}}
+int t = 0, bloques = 0;
+        sub[t].Initf = t;
+        sub[t].Initc = t;
+        sub[t].Finc = t;
+        sub[t].Finf = t;
+for_y
+    {
+    for_x
+        {
+            t++;
+            if(matriz[y][x] == 0)
+            {   //******** OPCIONES A LA QUE ENTRA 
+                int op = 0;
+                if((x+th > 0) && (y+tw>0) && matriz[x+th][y+tw] == 0) op =1;// ver si el bloque twxth esta dentro de la matriz y esta descupados los bloques 
+                else
+                    {
+                        if((x+th < h) && (y+tw<w)) op = 2; // BLOQUE MENOR AL TAMAÑO DESEADO DE ANCHO Y LARGO
+                        else{
+                            if(x+th >=h ) op = 3; // NO CUMPLE EL LARGO
+                                else{
+                                if(y+tw>=w ) op = 4; // NO CUMPLE EL ANCHO
+                                    }
+                            }
+                    }
+
+            switch(op){
+                case 1:
+                    bloques += th*tw;
+                     for (int i = y; i < y +tw ; i++)
+                        for (int j = x; j < x+th; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = y+tw;
+                    sub[t].Finf = x+th;
+                    break;
+
+                case 2:
+                    bloques += (h-x)*(w-y);
+                     for (int i = y; i < w ; i++)    
+                        for (int j = x; j < h; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = w;
+                    sub[t].Finf = h; 
+                    break;
+
+                case 3:
+                    bloques += (h-x)*(tw);
+                     for (int i = y; i < w ; i++)    
+                        for (int j = x; j <x+th; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = w;
+                    sub[t].Finf = x+th;   
+                    break;
+
+                case 4:
+                    bloques += (th)*(w-y);
+                     for (int i = y; i < y+tw ; i++)    
+                        for (int j = x; j <h; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = y+tw;
+                    sub[t].Finf = h;
+                    break;
+                default: exit(0);
+                }
+            }
+        }
+    }
+
+}
+ 
+void evolve(void *u)
+{
+    unsigned (*univ)[w] = u;
+    unsigned new[h][w];
+        for_y for_x new[y][x] = univ[y][x];
+        int vecinos = 0;
+    for_y 
+        for_x{
+            vecinos = NNeighbour(u,y,x);
+            if(univ[y][x]==1){ // Esta viva?
+                if(vecinos==2 || vecinos==3){ // Tienes dos o tres vecinos?
+                    new[y][x]=1; // sigues vivo
+                }
+                else{
+                    new[y][x]=0;// Estas solo,por lo tanto, muerto :C
+                }
+            }
+            else{ 
+                if(vecinos==3){ // Reviviste de la muerte :)
+                    new[y][x]=1;
+                }
+            }
+            vecinos = 0; 
+        
+    }
+    for_y for_x univ[y][x] = new[y][x];
+}
+void Abort(){
+            getch();
+          pid_t main = getpid();
+            kill(main,SIGTERM);
+}
+
+void Alldead(void *u){ 
+    unsigned (*univ)[w] = u;
+for_y   for_x{
+                univ[y][x]=0;
+                }
+}
+
+void game(int*Argvector, int Arglenght)
+{   
+    //*********** PARAMETROS
+    w = Argvector[0];
+    h = Argvector[1];
+    tw = Argvector[2];
+    th = Argvector[3];
+    int cantHilos = Argvector[4];
+    
+    struct submatrices *sub = malloc(sizeof(struct submatrices)*h*w); // tamaño hxw es el maximo tamaño que puede tomar
+    unsigned univ[h][w];
+    setSubmatrices(sub);
+    int i,ano = 0;
+    //static mthread_thread_t hilos[cantHilos];
+    
+
+    Alldead(univ);
+    for (i = 5; i < Arglenght-1;i++)
+    {   
+        if(!(Argvector[i]>h) && !(Argvector[i+1]>w))
+        univ[Argvector[i]][Argvector[i+1]] = 1;
+        i++;        
+    }
+        //Abort();
+
+    pid_t pidF = getpid();
+    pid_t pidS;
+    pidS =fork();
+    if(!pidS){
+        getch();
+            kill(pidF,SIGTERM);
+            kill(pidS,SIGTERM);
+    }
+    else{
+       while(1){
+            printf("Año %d\n",ano );
+            ano++;
+            show(univ); // width -> ancho -> fi 
+            evolve(univ);
+            usleep(100000000); 
+       }
+    }
+    
+}
+
+
+
+//****************** MODO EJECUCION*******************
+// compilación ideal :  gcc -std=c99 -Wall conway2.c -o salida
+// compilación estandar :  gcc conway2.c -o salida
+// Archivo de prueba : config
+// ejecición de prueba :./salida config
+ 
+int main(int argc,char *argv[])
+{
+    int vecc = 0;
+    int *vec = (int*) malloc (sizeof(int));
+    for (int i = 0; i < argc; ++i)
+    {
+        if(strncmp(argv[i],"config",200)){
+            vec = Argv(argv[1]);
+            vecc = Argc(argv[1]);
+            game(vec, vecc);
+            exit(0);
+        }else{
+            printf("ERROR 1: EJECCIÓN ESTANDAR ARCHIVO: 'CONFIG'");
+            exit(0);
+        }
+
+    }
+}
diff -x '.*' -ruNP CrPa/games/conway/conway1.c CrPa2/games/conway/conway1.c
--- CrPa/games/conway/conway1.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/conway1.c	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,167 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <termios.h>
+#include <curses.h>
+#include <signal.h>
+#include "entrada.h"
+ // Juego basado en  Juego de la vida  de :AlmaVagabunda
+ // Juego basado en  Conway_ Game_of_Life  de :rosettacode.org
+
+#define for_x for (int x = 0; x < w; x++) // ciclo para x
+#define for_y for (int y = 0; y < h; y++) // ciclo para y
+#define for_xy for_x for_y
+
+void show(void *u, int w, int h)
+{
+    int (*univ)[w] = u;
+    for_y {
+        for_x {
+                if(univ[y][x]==0){
+                printf("\033[7;31m :( "); // It's Dead
+            }
+            else{
+                printf("\033[7;32m :) "); // It's alive
+            }
+        }
+        printf("\n");
+    }
+    fflush(stdout);
+    printf("\n");
+}
+int NNeighbour(void *u,int w, int h,int i,int j){
+unsigned (*univ)[w] = u;
+int vecino = 0;
+            if(i>0 && j>0 && univ[i-1][j-1]==1){ // diagonal izq arriba
+                vecino++;
+            }
+            if(i>0 && univ[i-1][j]==1){ // arriba
+                vecino++;
+            }
+            if(i>0 && j<w &&univ[i-1][j+1]==1){ //diagonal derecha superior 
+                vecino++;
+            }
+            if(j>0 &&univ[i][j-1]==1){ // izquierda*
+                vecino++;
+            }
+            if(j<w && univ[i][j+1]==1){ // derecha
+                vecino++;
+            }
+            if(i<h && j>0 &&univ[i+1][j-1]==1){ // diagonal izqueda inferior*
+                vecino++;
+            }
+            if(i<h &&univ[i+1][j]==1){ // abajo*
+                vecino++;
+            }
+            if(i<h && j<w && univ[i+1][j+1]==1){ // diagonal derecha inferior
+                vecino++;
+            }
+            return vecino;
+}
+ 
+void evolve(void *u, int w, int h)
+{
+    unsigned (*univ)[w] = u;
+    unsigned new[h][w];
+        for_y for_x new[y][x] = univ[y][x];
+        int vecinos = 0;
+    for_y 
+        for_x{
+            vecinos = NNeighbour(u,w,h,y,x);
+            if(univ[y][x]==1){ // Esta viva?
+                if(vecinos==2 || vecinos==3){ // Tienes dos o tres vecinos?
+                    new[y][x]=1; // sigues vivo
+                }
+                else{
+                    new[y][x]=0;// Estas solo,por lo tanto, muerto :C
+                }
+            }
+            else{ 
+                if(vecinos==3){ // Reviviste de la muerte :)
+                    new[y][x]=1;
+                }
+            }
+            vecinos = 0; 
+        
+    }
+    for_y for_x univ[y][x] = new[y][x];
+}
+ 
+void Alldead(void *u,  int w, int h){ 
+    unsigned (*univ)[w] = u;
+for_y   for_x{
+                univ[y][x]=0;
+                }
+        }
+
+int getcha(void){ // GETCH VERSION PAUL
+    struct termios oldattr, newattr;
+    int ch;
+    tcgetattr( STDIN_FILENO, &oldattr );
+    newattr = oldattr;
+    newattr.c_lflag &= ~( ICANON | ECHO );
+    tcsetattr( STDIN_FILENO, TCSANOW, &newattr );
+    ch = getchar();
+    tcsetattr( STDIN_FILENO, TCSANOW, &oldattr );
+    return ch;
+}
+
+
+void game(int w, int h, int*Argvector, int Arglenght)
+{   
+    unsigned univ[h][w];
+    int i,ano = 0;
+    pid_t pidF = getpid();
+    pid_t pidS;
+    Alldead(univ,w,h);
+    for (i = 5; i < Arglenght-1;i++)
+    {   
+        univ[Argvector[i]][Argvector[i+1]] = 1;
+        i++;        
+    }
+    pidS =fork();
+    if(!pidS){
+        getcha();
+            kill(pidF,SIGTERM);
+            kill(pidS,SIGTERM);
+    }
+    else{
+
+    while(1){
+        printf("Año %d\n",ano );
+        ano++;
+        show(univ, w, h); // width -> ancho -> fi 
+        evolve(univ, w, h);
+        usleep(2000000);    
+    } 
+    printf("\033[0m ");
+    printf("\033[2K");
+    }
+
+}
+
+//****************** MODO EJECUCION*******************
+// compilación ideal :  gcc -std=c99 -Wall conway2.c -o salida
+// compilación estandar :  gcc conway2.c -o salida
+// Archivo de prueba : config
+// ejecición de prueba :./salida config
+ 
+int main(int argc,char *argv[])
+{   int vecc = 0;
+    int *vec = (int*) malloc (sizeof(int));
+    for (int i = 0; i < argc; ++i)
+    {
+        if(strncmp(argv[i],"config",200)){
+            vec = Argv(argv[1]);
+            vecc = Argc(argv[1]);
+            game(vec[0], vec[1], vec, vecc);
+            exit(0);
+        }else{
+            printf("ERROR 1: EJECCIÓN ESTANDAR ARCHIVO: 'CONFIG'");
+            exit(0);
+        }
+
+    }
+    exit(0);
+}wa
\ No newline at end of file
diff -x '.*' -ruNP CrPa/games/conway/conway2.c CrPa2/games/conway/conway2.c
--- CrPa/games/conway/conway2.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/conway2.c	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,333 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <termios.h>
+#include <signal.h>
+#include <minix/mthread.h>
+#include "bar.c"
+#include "entrada.h"
+ // Juego basado en  Juego de la vida  de :AlmaVagabunda
+ // Juego basado en  Conway_ Game_of_Life  de :rosettacode.org
+
+#define for_x for (int x = 0; x < w; x++) // ciclo para x
+#define for_y for (int y = 0; y < h; y++) // ciclo para y
+#define for_xy for_x for_y
+int h,w,th,tw;
+typedef struct submatrices_t{
+    int Initf, Initc, Finf , Finc;
+}submatrices;
+
+
+typedef struct paramloop_t{
+int t;
+submatrices *sub;
+int **univ;
+}paramloop;
+
+
+
+int getch(void)
+{
+    struct termios oldattr, newattr;
+    int ch;
+    tcgetattr( STDIN_FILENO, &oldattr );
+    newattr = oldattr;
+    newattr.c_lflag &= ~( ICANON | ECHO );
+    tcsetattr( STDIN_FILENO, TCSANOW, &newattr );
+    ch = getchar();
+    tcsetattr( STDIN_FILENO, TCSANOW, &oldattr );
+    return ch;
+}
+
+
+void *show(void *u)
+{
+	int **univ = (int**)u;
+    for_y {
+		for_x {
+                if(univ[y][x]==0){
+                printf("\033[7;31m :( "); // It's Dead
+            }
+            else{
+                printf("\033[7;32m :) "); // It's alive
+            }
+        }
+        printf("\n");
+	}
+	fflush(stdout);
+    printf("\n");
+    printf("\033[0m ");
+    printf("\033[2K");
+        return NULL;
+}
+
+int NNeighbour(void *u,int i,int j){
+int **univ = (int**)u;
+int vecino = 0;
+            if(i>0 && j>0 && univ[i-1][j-1]==1){ // diagonal izq arriba
+                vecino++;
+            }
+            if(i>0 && univ[i-1][j]==1){ // arriba
+                vecino++;
+            }
+            if(i>0 && j<w &&univ[i-1][j+1]==1){ //diagonal derecha superior 
+                vecino++;
+            }
+            if(j>0 &&univ[i][j-1]==1){ // izquierda*
+                vecino++;
+            }
+            if(j<w && univ[i][j+1]==1){ // derecha
+                vecino++;
+            }
+            if(i<h && j>0 &&univ[i+1][j-1]==1){ // diagonal izqueda inferior*
+                vecino++;
+            }
+            if(i<h &&univ[i+1][j]==1){ // abajo*
+                vecino++;
+            }
+            if(i<h && j<w && univ[i+1][j+1]==1){ // diagonal derecha inferior
+                vecino++;
+            }
+            return vecino;
+}
+
+
+int setSubmatrices(void *s){ // x = j = h = th || y = i = w = tw 
+submatrices *sub = (submatrices*)s;
+int matriz[h][w];
+for_y{
+    for_x{
+     matriz[y][x] = 0;}}
+int t = 0, bloques = 0;
+        sub[t].Initf = t;
+        sub[t].Initc = t;
+        sub[t].Finc = t;
+        sub[t].Finf = t;
+for_y
+    {
+    for_x
+        {
+            t++;
+            if(matriz[y][x] == 0)
+            {   //******** OPCIONES A LA QUE ENTRA 
+                int op = 0;
+                if((x+th > 0) && (y+tw>0) && matriz[x+th][y+tw] == 0) op =1;// ver si el bloque twxth esta dentro de la matriz y esta descupados los bloques 
+                else
+                    {
+                        if((x+th < h) && (y+tw<w)) op = 2; // BLOQUE MENOR AL TAMAÑO DESEADO DE ANCHO Y LARGO
+                        else{
+                            if(x+th >=h ) op = 3; // NO CUMPLE EL LARGO
+                                else{
+                                if(y+tw>=w ) op = 4; // NO CUMPLE EL ANCHO
+                                    }
+                            }
+                    }
+
+            switch(op){
+                case 1:
+                    bloques += th*tw;
+                     for (int i = y; i < y +tw ; i++)
+                        for (int j = x; j < x+th; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = y+tw;
+                    sub[t].Finf = x+th;
+                    break;
+
+                case 2:
+                    bloques += (h-x)*(w-y);
+                     for (int i = y; i < w ; i++)    
+                        for (int j = x; j < h; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = w;
+                    sub[t].Finf = h; 
+                    break;
+
+                case 3:
+                    bloques += (h-x)*(tw);
+                     for (int i = y; i < w ; i++)    
+                        for (int j = x; j <x+th; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = w;
+                    sub[t].Finf = x+th;   
+                    break;
+
+                case 4:
+                    bloques += (th)*(w-y);
+                     for (int i = y; i < y+tw ; i++)    
+                        for (int j = x; j <h; j++)
+                            matriz[i][j] =1;
+                    sub[t].Initf = y;
+                    sub[t].Initc = x;
+                    sub[t].Finc = y+tw;
+                    sub[t].Finf = h;
+                    break;
+                default: exit(0);
+                }
+            }
+        }
+    }
+    return t;
+}
+ 
+void evolve(void *u, void *s, int t)
+{
+    submatrices *sub = (submatrices *)s;
+	int **univ = (int **)u;
+	int **new =  (int **)u;
+ 		int vecinos = 0;
+
+    for(int y = sub[t].Initc; y < sub[t].Finc; y++)
+        for (int x = sub[t].Initf; x < sub[t].Finf; x++)
+        {
+			vecinos = NNeighbour(u,y,x);
+			if(univ[y][x]==1){ // Esta viva?
+                if(vecinos==2 || vecinos==3){ // Tienes dos o tres vecinos?
+                    new[y][x]=1; // sigues vivo
+                }
+                else{
+                    new[y][x]=0;// Estas solo,por lo tanto, muerto :C
+                }
+            }
+            else{ 
+                if(vecinos==3){ // Reviviste de la muerte :)
+                    new[y][x]=1;
+                }
+            }
+            vecinos = 0; 
+		
+	}
+	for_y for_x univ[y][x] = new[y][x];
+}
+void *Abort(){
+            getch();
+          pid_t main = getpid();
+            kill(main,SIGTERM);
+            return NULL;
+}
+
+void Alldead(void *u){ 
+	int **univ = (int **)u;
+for_y	for_x{
+                univ[y][x]=0;
+                }
+}
+
+ void *ciclo(void *arguments){
+        paramloop *args = (paramloop *)arguments;
+        int t =args->t;
+        submatrices (*sub) = args->sub;
+        int **univ  = args->univ;
+        free(arguments);
+        free(args);
+       int ano = 0;
+       while(1){
+            printf("Año %d\n",ano );
+            ano++;
+            show(univ); // width -> ancho -> fi 
+            for (int i = 0; i < t; ++i)
+                evolve(univ,sub,i);
+            usleep(100000); 
+       }
+       return NULL;
+}
+
+void game(int*Argvector, int Arglenght, void *u)
+{   
+    printf("hola\n");
+    //*********** PARAMETROS
+    w = Argvector[0];
+    h = Argvector[1];
+    tw = Argvector[2];
+    th = Argvector[3];
+    int cantHilos = Argvector[4];
+    submatrices *sub = (submatrices*)malloc(sizeof(submatrices)*h*w); // tamaño hxw es el maximo tamaño que puede tomar
+    int **univ = (int **)u;
+    int t = setSubmatrices(sub);
+    int i;
+    //static mthread_thread_t hilos[cantHilos];
+    printf("hola\n");
+    Alldead(univ);
+    printf("hola\n");
+    for (i = 5; i < Arglenght-1;i++)
+    {   
+        univ[Argvector[i]][Argvector[i+1]] = 1;
+        i++;        
+    }
+    printf("hola\n");
+    paramloop *p = (paramloop *)malloc(sizeof(paramloop));
+    printf("hola\n");
+    //struct paramshow params;
+    p->t = t;
+    p->sub = sub;
+    p->univ = univ;
+
+
+    
+    /*mthread_t hilos[cantHilos];
+    mthread_barrier_t *barrera1 = malloc(sizeof(struct mthread_barrier_t *));
+    int index_bar1 = mthread_barrier_init(barrera1, cantHilos);
+    
+    mthread_create(&hilos[0], NULL, &Abort, NULL);
+    mthread_create(&hilos[1], NULL, &show, (void *)&univ);
+    for (int i=2; i<cantHilos; i++) {
+      mthread_create(&hilos[i], NULL, &ciclo,&p);
+    }
+
+    for (int i=0; i<cantHilos; i++){
+    mthread_join(hilos[i], NULL);
+    }*/
+        /*
+
+        //Abort();
+
+
+	   while(1){
+            printf("Año %d\n",ano );
+            ano++;
+		    show(univ); // width -> ancho -> fi 
+		    for (i = 0; i < t; ++i)
+            {
+                evolve(univ,sub,i);
+            }
+		    usleep(100000);	
+	   }*/
+}
+
+
+
+//****************** MODO EJECUCION*******************
+// compilación ideal :  gcc -std=c99 -Wall conway2.c -o salida
+// compilación estandar :  gcc conway2.c -o salida
+// Archivo de prueba : config
+// ejecición de prueba :./salida config
+ 
+int main(int argc,char *argv[])
+{
+    int vecc = 0;
+	int *vec = (int*) malloc (sizeof(int));
+	for (int i = 0; i < argc; ++i)
+	{
+		if(strncmp(argv[i],"config",200)){
+			vec = Argv(argv[1]);
+			vecc = Argc(argv[1]);
+            int **matriz;
+            matriz = (int **)malloc (vec[0]*sizeof(int *));
+            for (int x=0;x<vec[0];i++)
+            matriz[x] = (int *) malloc (vec[1]*sizeof(int));
+
+			game(vec, vecc, matriz);
+			exit(0);
+		}else{
+			printf("ERROR 1: EJECCIÓN ESTANDAR ARCHIVO: 'CONFIG'");
+			exit(0);
+		}
+
+	}
+}
diff -x '.*' -ruNP CrPa/games/conway/entrada.c CrPa2/games/conway/entrada.c
--- CrPa/games/conway/entrada.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/entrada.c	2016-05-20 09:04:40.000000000 -0300
@@ -0,0 +1,42 @@
+    #include "entrada.h"
+    #include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+    int* Argv(char *archivo){
+    FILE *fp;
+    int *arg = (int*) malloc (sizeof(int));
+    char ch = ' ';
+    fp = fopen("config","r");
+    if(fp == NULL)
+        exit(1);
+    int t = 0;
+    while (feof(fp)==0){
+        ch = fgetc(fp);
+        if(ch == ' ' || ch == '\n'){
+            t++;
+            arg[t] = 0;
+        }
+            if((ch-48)>0)
+               arg[t] = (ch-48) + arg[t]*10;
+    }  
+   fclose(fp);
+return arg;
+       }
+
+    int Argc(char *archivo){
+    FILE *fp;
+    char ch = ' ';
+    fp = fopen("config","r");
+    if(fp == NULL)
+        exit(1);
+    int t = 0;
+    while (feof(fp)==0){
+        ch = fgetc(fp);
+        if(ch == ' ' || ch == '\n'){
+            t++;
+        }
+    }  
+   fclose(fp);
+return t+1;
+       }
\ No newline at end of file
diff -x '.*' -ruNP CrPa/games/conway/entrada.h CrPa2/games/conway/entrada.h
--- CrPa/games/conway/entrada.h	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/games/conway/entrada.h	2016-05-15 22:28:48.000000000 -0300
@@ -0,0 +1,7 @@
+#ifndef	ENTRADA_H
+#define	ENTRADA_H
+
+    int* Argv(char *archivo);
+    int Argc(char *archivo);
+
+#endif  /*ENTRADA_H */
\ No newline at end of file
Binary files CrPa/games/conway/salida and CrPa2/games/conway/salida differ
Binary files CrPa/informe_avances/InformeSO_2_Final.pdf and CrPa2/informe_avances/InformeSO_2_Final.pdf differ
diff -x '.*' -ruNP CrPa/minix/commands/conway/Makefile CrPa2/minix/commands/conway/Makefile
--- CrPa/minix/commands/conway/Makefile	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/minix/commands/conway/Makefile	2016-05-06 20:50:25.000000000 -0300
@@ -0,0 +1,3 @@
+PROG=	conway
+
+.include <bsd.prog.mk>
diff -x '.*' -ruNP CrPa/minix/commands/conway/conway.c CrPa2/minix/commands/conway/conway.c
--- CrPa/minix/commands/conway/conway.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/minix/commands/conway/conway.c	2016-05-06 22:37:50.000000000 -0300
@@ -0,0 +1,33 @@
+#include <string.h>
+#include <stdio.h>
+
+/* El archivo que se recibe por parametro es la ruta del archivo config */
+
+int main(int argc, char *argv[]) {
+ 
+	char * line = NULL;
+    size_t len = 0;
+    ssize_t read;
+
+	if (!argv [1])
+	{
+		printf("Error, no existe el archivo");
+		return 0;
+	}
+
+	FILE *file = fopen(argv[1], "r");
+	int rows = 0;
+	while ((read = getline(&line, &len, file)) != -1) {
+        printf("%s", line);
+        rows = rows + 1;
+    }
+    printf("%d\n", rows);
+
+	char *valores[rows][2]; // Matriz para guardar los valores que ocuparan los hilos y el programa
+    
+	/* Volver a hacer el ciclo */
+
+	/* Poner el juego */ 
+
+    return 0;
+}
\ No newline at end of file
diff -x '.*' -ruNP CrPa/minix/include/minix/mthread.h CrPa2/minix/include/minix/mthread.h
--- CrPa/minix/include/minix/mthread.h	2016-05-06 20:15:40.000000000 -0300
+++ CrPa2/minix/include/minix/mthread.h	2016-05-15 22:40:24.000000000 -0300
@@ -1,5 +1,5 @@
 #ifndef _MTHREAD_H
-#define _MTHREAD_H 
+#define _MTHREAD_H
 
 #include <minix/config.h>	/* MUST be first */
 #include <minix/const.h>
@@ -34,20 +34,6 @@
 };
 typedef struct __mthread_mutex *mthread_mutex_t;
 
-/* -------------------- Definicion de estructura barrier --------------------*/
-
-struct __mthread_barrier {
-  // mthread_barrier_t barrier_owner; 
-#ifdef MTHREAD_STRICT
-  struct __mthread_barrier *bar_prev;
-  struct __mthread_barrier *bar_next;
-#endif
-  // unsigned int 
-};
-typedef struct __mthread_barrier *mthread_barrier_t;
-
-/* -------------------- Termino de definicion para estructura barrier -------------------- */
-
 struct __mthread_cond {
   struct __mthread_mutex *mc_mutex;	/* Associate mutex with condition */
 #ifdef MTHREAD_STRICT
@@ -58,6 +44,21 @@
 };
 typedef struct __mthread_cond *mthread_cond_t;
 
+/* -------------------- Definicion de estructura barrier --------------------*/
+
+struct __mthread_barrier {
+  int cantmax;
+  int cantdisp;
+  int ciclo;
+  mthread_mutex_t mutex;
+  mthread_cond_t cond;
+};
+typedef struct __mthread_barrier mthread_barrier_t;
+
+
+/* -------------------- Termino de definicion para estructura barrier -------------------- */
+
+
 struct __mthread_attr {
   size_t ma_stacksize;
   char *ma_stackaddr;
@@ -70,7 +71,6 @@
 typedef struct {
   mthread_mutex_t mutex;
   mthread_cond_t cond;
-  mthread_barrier_t barrier; // add 
 } mthread_event_t;
 
 typedef struct {
@@ -140,8 +140,8 @@
 int mthread_mutex_unlock(mthread_mutex_t *mutex);
 
 /* barrier.c */
-int mthread_barrier_init(mthread_barrier_t *barrier);
-int mthread_barrier_destroy(mthread_barrier_t *barrier);
+int mthread_barrier_init(mthread_barrier_t *barrier, int hilos);
+int mthread_barrier_destroy(int index);
 int mthread_barrier_sync(mthread_barrier_t *barrier);
 
 /* event.c */
@@ -227,14 +227,6 @@
 int pthread_mutex_trylock(pthread_mutex_t *mutex);
 int pthread_mutex_unlock(pthread_mutex_t *mutex);
 
-/* mutex.c */
-int mthread_mutex_destroy(pthread_mutex_t *mutex);
-int mthread_mutex_init(pthread_mutex_t *mutex, mthread_mutexattr_t
-  *mattr);
-int mthread_mutex_lock(pthread_mutex_t *mutex);
-int mthread_mutex_trylock(pthread_mutex_t *mutex);
-int mthread_mutex_unlock(thread_mutex_t *mutex);
-
 /* event.c */
 int pthread_event_destroy(pthread_event_t *event);
 int pthread_event_init(pthread_event_t *event);
diff -x '.*' -ruNP CrPa/minix/lib/libmthread/barrier.c CrPa2/minix/lib/libmthread/barrier.c
--- CrPa/minix/lib/libmthread/barrier.c	1969-12-31 21:00:00.000000000 -0300
+++ CrPa2/minix/lib/libmthread/barrier.c	2016-05-27 19:53:23.000000000 -0300
@@ -0,0 +1,179 @@
+#include <minix/mthread.h>
+#include "global.h"
+#include "proto.h"
+#include <errno.h>
+
+#define ARRAY_SIZE_B 5 /* NOTA: valor de prueba, cambiarlo luego para duplicar memoria en funcion*/
+
+mthread_barrier_t *barreras[ARRAY_SIZE_B]; /* arreglo global para barreras */
+
+unsigned int tope_b; /*indice del ultimo puntero guardado en el arreglo barreras */
+
+
+/*===========================================================================*
+ *				mthread_barrier_init			     *
+ *===========================================================================*/
+
+
+int mthread_barrier_init(mthread_barrier_t *barrier, int hilos) {
+
+	int err; /* definicion de variable para codigo de error */
+
+ 	err = mthread_mutex_init(&barrier->mutex, NULL); /* se inicializa el mutex */
+ 	if (err != 0)
+ 		return err; 
+
+ 	err = mthread_cond_init(&barrier->cond, NULL); /* se inicializa variable de condicion */
+ 	if (err != 0) /* error al inicializar la variable de condicion, luego se destruye el mutex */
+ 	{
+ 		mthread_mutex_destroy(&barrier->mutex); 
+ 		return err;
+ 	}
+
+ 	/* se inicializan las variables del objeto */ 
+    barrier->cantmax = hilos;
+	barrier->cantdisp = hilos;
+	barrier->ciclo = 0;
+
+	/* la nueva barrera se guarda en el arreglo global de barreras */
+	int indice = 0;
+	barreras[tope_b] = barrier;
+	indice = tope_b;
+	tope_b += 1;
+
+	return indice; /* se retorna indice donde se guarda la barrera para poder manejarla posteriormente */
+}
+
+/*===========================================================================*
+ *				mthread_barrier_destroy			     *
+ *===========================================================================*/
+
+int mthread_barrier_destroy(int index) { /* recibimos indice donde se guarda la barrera */
+
+	if (!barreras[index]) /* si no existe la barrera que se pasa por parametro en el arreglo retornamos EINVAL */
+		return (EINVAL);
+
+	if (barreras[index]->cantdisp != barreras[index]->cantmax) {
+		mthread_mutex_unlock(&barreras[index]->mutex);
+		return (EBUSY); /* error en caso de que la cantidad de hilos disponible no sea maxima */
+	}
+	
+	/* en caso de que no hayan hilos esperando en la barrera liberamos la memoria */ 
+	free(barreras[index]);
+	barreras[index] = NULL;
+
+	return 0;
+}
+
+/*===========================================================================*
+ *				mthread_barrier_sync		     *
+ *===========================================================================*/
+
+int mthread_barrier_sync(mthread_barrier_t *barrier) {
+
+	if (!barrier) /* si la barrera pasada por parametro no existe retornamos EINVAL */
+		return (EINVAL);
+
+	int err; /* definicion de variable para codigo de error */
+
+    err = mthread_mutex_lock(&barrier->mutex); /* se lockea el mutex de la barrera */
+    
+    if (err != 0)
+        return err;
+
+    int ciclo, err2;
+
+	ciclo = barrier->ciclo; /* ciclo en el que se esta actualmente */  
+
+    if (--barrier->cantdisp == 0) { 
+       
+        barrier->ciclo = !(barrier->ciclo);
+        barrier->cantdisp = barrier->cantmax; /* se ha alcanzado la cantidad maxima de hilos que se necesitaban */
+
+        err2 = mthread_cond_broadcast(&barrier->cond); /* cambia la condicion luego se despierta a todos los hilos */
+        
+        if (err2 == 0)
+            err2 = -1; /* el ultimo hilo que llega a la barrera retornara -1 */
+    	} else {
+    		while (ciclo == barrier->ciclo) { /* mientras el ciclo de la barrera sea igual se espera */
+	        err2 = mthread_cond_wait(&barrier->cond, &barrier->mutex);
+	        if (err2 != 0) 
+	        	break;
+        	}
+	}
+    mthread_mutex_unlock(&barrier->mutex); /* se unlockea el mutex */
+    return err2; 
+}
+
+/********************************************* Otras *********************************************/
+
+void print_barrier_array() {
+	for(int i = 0; i < ARRAY_SIZE_B; i++){
+		printf("barreras[%d] = %p\n", i, barreras[i]);
+	}
+}
+
+
+// void duplicate_memory_array(mthread_barrier_t *arr, int old_size) {
+	
+// 	int new_size = old_size * 2;
+// 	mthread_barrier_t *barreras[new_size];
+
+// 	for (int i = 0; i < old_size * 2; i++){
+// 		barreras[i] = &arr[i];
+// 	} 
+
+// 	return;
+// }
+
+static void *test(void *arg) {
+	int *ptr = (int *)arg;
+	int val = *ptr;
+	printf("Soy el hilo numero = %d (antes de la barrera)\n", val);
+	int err = mthread_barrier_sync(barreras[0]);
+	printf("err de sync = %d\n", err);
+	return NULL;
+}
+
+/*************************************************************************************************/
+
+#define NUM 5
+static mthread_thread_t hilos[NUM];
+static int *numbers[NUM];
+
+int main() {
+
+	mthread_barrier_t *barrera0 = malloc(sizeof(struct mthread_barrier_t *));
+
+	mthread_barrier_init(barrera0, NUM);
+	
+	printf("\n\n**** PRUEBA DE INIT ****\n\n");	
+
+	print_barrier_array();
+
+	printf("\n\n**** PRUEBA DE SYNC ****\n\n");
+
+	for (int i=0; i<NUM; i++) {
+		numbers[i] = (int *) malloc(sizeof(int));
+		*numbers[i] = i;
+		mthread_create(&hilos[i], NULL, test, numbers[i]);
+	}
+
+	for (int i=0; i<NUM; i++){
+		mthread_join(hilos[i], NULL);
+	}
+	
+	printf("\n\n**** PRUEBA DE DESTROY ****\n\n");
+
+	int err = mthread_barrier_destroy(0);
+	printf("err de destroy = %d\n", err);
+
+	print_barrier_array();
+
+	printf("\n\n");
+
+	return 0;
+}
+
+
+
diff -x '.*' -ruNP CrPa/minix/lib/libmthread/proto.h CrPa2/minix/lib/libmthread/proto.h
--- CrPa/minix/lib/libmthread/proto.h	2016-05-06 20:04:00.000000000 -0300
+++ CrPa2/minix/lib/libmthread/proto.h	2016-05-27 19:53:23.000000000 -0300
@@ -33,6 +33,10 @@
 # define mthread_debug(m)
 #endif
 
+/* barrier.c */
+
+void print_barrier_array(void);
+
 /* mutex.c */
 void mthread_init_valid_mutexes(void);
 
Binary files CrPa/testing_barrier/barrier_init&destroy_test.png and CrPa2/testing_barrier/barrier_init&destroy_test.png differ
Binary files CrPa/testing_barrier/barrier_sync_test1_example.png and CrPa2/testing_barrier/barrier_sync_test1_example.png differ
Binary files CrPa/testing_barrier/barrier_sync_test2_example.png and CrPa2/testing_barrier/barrier_sync_test2_example.png differ
